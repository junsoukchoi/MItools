% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/envelope.R
\name{envelope}
\alias{envelope}
\title{Simulation Envelopes of Summary Function}
\usage{
envelope(Y, fun, funargs, nsim = 99, nrank = 1, global = FALSE)
}
\arguments{
\item{Y}{Object containing point pattern data. A point pattern (object of class "ppp").}

\item{fun}{Function that computes the desired summary statistic for a point pattern.}

\item{funargs}{A list, containing extra arguments to be passed to \code{fun}.}

\item{nsim}{Number of simulated point patterns to be generated when computing the envelopes.}

\item{nrank}{Integer. Rank of the envelope value amongst the \code{nsim} simulated values. A rank of 1 means that the minimum and maximum simulated values will be used.}

\item{global}{Logical flag indicating whether envelopes should be pointwise (\code{global=FALSE}) or simultaneous (\code{global=TRUE}).}
}
\value{
An object of class "\code{envelope}" and "\code{fv}", which can be printed and plotted directly.

Essentially a data frame containing columns
\item{r}{the vector of values of the argument \eqn{r} at which the summary function fun has been estimated}
\item{obs}{values of the summary function for the data point pattern}
\item{lo}{lower envelope of simulations}
\item{hi}{upper envelope of simulations}
\item{theo}{the theoretical value \eqn{g_{ij}(r) = 1} for independent marks}
and either
\item{theo}{theoretical value of the summary function under CSR (Complete Spatial Randomness, a uniform Poisson point process) if the simulations were generated according to CSR}
\item{mmean}{testimated theoretical value of the summary function, computed by averaging simulated values, if the simulations were not generated according to CSR.}
}
\description{
Computes simulation envelopes of a summary function.
}
\examples{
# load pre-processed lung cancer data
load(url("https://github.com/julia-wrobel/MI_tutorial/raw/main/Data/lung.RDA"))

# randomly select a lung cancer image and define cell types
library(dplyr)
subj_df = filter(lung_df, image_id == "#73 6-333-711_[44841,18646].im3")
subj_df = subj_df \%>\%
   mutate(phenotype = case_when(
      phenotype_cd19 == "CD19+" ~ "CD19+ B-cell",
      phenotype_cd14 == "CD14+" ~ "CD14+ cell",
      phenotype_cd8 == "CD8+" ~ "CD8+ T-cell",
      phenotype_cd4 == "CD4+" ~ "CD4+ T-cell",
      phenotype_ck  == "CK+" ~ "CK+ cancer cell",
      TRUE ~ "Other"
   ))

# convert the selected lung cancer image into the object of class "ppp" representing a multitype point pattern
pp_lung = multitype.pp(subj_df$x, subj_df$y, subj_df$phenotype)

# compute envelopes of the K-cross function between CD19+ B-cell and CD14+ cell under CSR
envelope_K = envelope(pp_lung, Kcross, funargs = list(i = "CD19+ B-cell", j = "CD14+ cell", correction = "none"))
plot(envelope_K, main = "Envelopes of the K-cross function")
summary(envelope_K)
}
